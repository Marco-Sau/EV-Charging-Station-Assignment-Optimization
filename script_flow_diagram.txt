EV CHARGING OPTIMIZATION - SCRIPT FLOW DIAGRAM
==============================================

┌─────────────────────────────────────────────────────────────────────────────┐
│                           USER INTERFACE                                   │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                    run_ev_optimization.py                                  │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │ • CLI orchestrator                                                 │   │
│  │ • Runs both algorithms by default                                  │   │
│  │ • Command line argument parsing                                    │   │
│  │ • Results saving with timestamps                                   │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                              DATA SOURCES                                  │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                    ┌───────────────┼───────────────┐
                    ▼               ▼               ▼
┌─────────────────────────┐ ┌─────────────────────────┐ ┌─────────────────────────┐
│ cagliari_real_scenario  │ │ cagliari_ev_scenario    │ │                         │
│ .py                     │ │ .py                     │ │                         │
│ ┌─────────────────────┐ │ │ ┌─────────────────────┐ │ │                         │
│ │ • Real Cagliari     │ │ │ │ • Backwards         │ │ │                         │
│ │   transportation    │ │ │ │   compatibility     │ │ │                         │
│ │   data              │ │ │ │   shim              │ │ │                         │
│ │ • 11 supply locs    │ │ │ │ • Legacy interface  │ │ │                         │
│ │ • 5 demand locs     │ │ │ │   maintenance       │ │ │                         │
│ │ • Cost matrix       │ │ │ │                     │ │ │                         │
│ │ • Capacities        │ │ │ │                     │ │ │                         │
│ └─────────────────────┘ │ │ └─────────────────────┘ │ │                         │
└─────────────────────────┘ └─────────────────────────┘ └─────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                        CORE ALGORITHMS ENGINE                              │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                    ev_charging_mcf.py                                      │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │                    MAIN ALGORITHMS                                 │   │
│  │  ┌─────────────────────────────────────────────────────────────┐   │   │
│  │  │ • ssp_with_potentials()     - Successive Shortest Path    │   │   │
│  │  │ • cycle_canceling()         - Cycle-Canceling Algorithm   │   │   │
│  │  │ • build_transportation_     - Network Construction        │   │   │
│  │  │   network()                                                │   │   │
│  │  │ • total_cost()             - Objective Calculation        │   │   │
│  │  │ • extract_nonzero_flows()  - Solution Extraction          │   │   │
│  │  └─────────────────────────────────────────────────────────────┘   │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
│                                    │                                       │
│                                    ▼                                       │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │                    SUPPORTING ALGORITHMS                           │   │
│  │  ┌─────────────────────────────────────────────────────────────┐   │   │
│  │  │ • _dijkstra_reduced_costs() - Dijkstra's Algorithm        │   │   │
│  │  │ • bellman_ford_cycle_      - Bellman-Ford Algorithm       │   │   │
│  │  │   detection()                                              │   │   │
│  │  │ • preflow_push_fifo()      - Preflow-Push Algorithm       │   │   │
│  │  │ • backward_breadth_first_  - Reverse BFS Algorithm        │   │   │
│  │  │   search()                                                 │   │   │
│  │  └─────────────────────────────────────────────────────────────┘   │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                                    ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                              OUTPUTS                                       │
└─────────────────────────────────────────────────────────────────────────────┘
                                    │
                    ┌───────────────┼───────────────┐
                    ▼               ▼               ▼
┌─────────────────────────┐ ┌─────────────────────────┐ ┌─────────────────────────┐
│      results/           │ │   visualizations/       │ │    Documentation        │
│ ┌─────────────────────┐ │ │ ┌─────────────────────┐ │ │ ┌─────────────────────┐ │
│ │ • JSON result files │ │ │ │ • flow_network.png  │ │ │ │ • README.md         │ │
│ │ • Timestamped       │ │ │ │ • cost_distribution │ │ │ │ • LaTeX report      │ │
│ │ • Algorithm results │ │ │ │   .png              │ │ │ │ • Requirements      │ │
│ │ • Performance data  │ │ │ │ • results_dashboard │ │ │ │ • GitHub repo       │ │
│ │ • Flow assignments  │ │ │ │   .png              │ │ │ │                     │ │
│ └─────────────────────┘ │ │ └─────────────────────┘ │ │ └─────────────────────┘ │
└─────────────────────────┘ └─────────────────────────┘ └─────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                           EXECUTION SEQUENCE                               │
└─────────────────────────────────────────────────────────────────────────────┘

1. USER RUNS: python run_ev_optimization.py
   │
   ▼
2. LOADS DATA: get_cagliari_instance()
   │
   ▼
3. BUILDS NETWORK: build_transportation_network()
   │
   ▼
4. RUNS ALGORITHMS:
   ├── ssp_with_potentials() → 2.7ms, €22,624.50
   └── cycle_canceling() → 21.6ms, €22,624.50
   │
   ▼
5. SAVES RESULTS: JSON files in results/
   │
   ▼
6. OPTIONAL VISUALIZATION: python visualize_results.py
   │
   ▼
7. GENERATES PLOTS: PNG files in visualizations/

┌─────────────────────────────────────────────────────────────────────────────┐
│                            KEY ALGORITHMS                                  │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  SUCCESSIVE SHORTEST PATH (SSP)                                            │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │ 1. Initialize zero flow and node potentials                        │   │
│  │ 2. Find shortest path using reduced costs                          │   │
│  │ 3. Augment flow along the path                                     │   │
│  │ 4. Update node potentials                                          │   │
│  │ 5. Repeat until optimal                                            │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  CYCLE-CANCELING                                                           │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │ 1. Find initial feasible flow using Preflow-Push                   │   │
│  │ 2. Detect negative cost cycles using Bellman-Ford                  │   │
│  │ 3. Cancel cycles by pushing flow around them                       │   │
│  │ 4. Repeat until no negative cycles remain                          │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  SUPPORTING ALGORITHMS                                                     │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │ • Dijkstra: Shortest path finding in SSP (reduced costs)          │   │
│  │ • Bellman-Ford: Negative cycle detection                           │   │
│  │ • Preflow-Push: Initial flow finding                               │   │
│  │ • Reverse BFS: Height initialization                               │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                            PERFORMANCE RESULTS                             │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  CAGLIARI SCENARIO (11 supply, 5 demand, 350 units)                       │
│  ┌─────────────────────────────────────────────────────────────────────┐   │
│  │ Algorithm        │ Time (ms) │ Total Cost (€) │ Status             │   │
│  │ ─────────────────┼───────────┼────────────────┼──────────────────── │   │
│  │ SSP              │ 2.7       │ 22,624.50      │ ✅ Optimal         │   │
│  │ Cycle-Canceling  │ 21.6      │ 22,624.50      │ ✅ Optimal         │   │
│  └─────────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────────────────────┘
